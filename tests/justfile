# Define the default task
export BUILD_DIR := ".build"
export RESULT_DIR := ".results"


default:
  @just --list

clean:  # remove all .build directories
    find . -type d -name '{{BUILD_DIR}}' -prune -exec rm -rf {} \;
    find . -type d -name '{{RESULT_DIR}}' -prune -exec rm -rf {} \;

test_one $file:  # compile a single test file
    #!/usr/bin/env bash
    # compile the file, catch the errors in a variable
    name="$(basename $file '.tex')"
    # compile with pdf output
    errors_pdf=$(latexmk -pdf --output-directory="$BUILD_DIR/pdf/$name" "$file" 2>&1)
    if [ $? -eq 0 ]; then
        pdf_ok="✅"
        mkdir -p "$RESULT_DIR/pdf"
        cp "$BUILD_DIR/pdf/$name/$name.pdf" "$RESULT_DIR/pdf/$name.pdf"
    else
        pdf_ok="❌"
    fi
    # compile with LuaLaTeX
    errors_lua=$(latexmk -pdflua --output-directory="$BUILD_DIR/lua/$name" "$file" 2>&1)
    if [ $? -eq 0 ]; then
        lua_ok="✅"
        mkdir -p "$RESULT_DIR/lua"
        cp "$BUILD_DIR/lua/$name/$name.pdf" "$RESULT_DIR/lua/$name.pdf"
    else
        lua_ok="❌"
    fi
    # print the result
    padded_name=$(printf "%-32s" "$name")
    echo "$padded_name${pdf_ok}${lua_ok} (pdf/lua)"


# Define the test task
test:
    #!/usr/bin/env bash
    just clean
    # detect all test files
    shopt -s nullglob
    files=(test{,s}_*.tex)
    # run the tests in parallel
    echo "Running tests on ${#files[@]} test files."
    for file in "${files[@]}"; do
        just test_one "$file" &
    done
    wait
